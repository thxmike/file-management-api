{
  "openapi": "3.0.3",
  "info": {
    "version": "0.1.0",
    "title": "file-management-api",
    "description": "An api to allow management of files within Florence Healthcare for multiple files. This API supports Uploading, Downloading, Get a list of files and get file metadata operations for Files",
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "servers": [
    {
      "url": "https://localhost:3001",
      "description": "local development",
      "variables": {
        "protocol": {
          "enum": [
            "http"
          ],
          "default": "http"
        }
      }
    }
  ],
  "tags": [
    {
      "name": "File Management",
      "description": "API for File Management"
    }
  ],
  "paths": {
    "/api/v1/files": {
      "get": {
        "tags": [
          "Files"
        ],
        "summary": "This gives the consumer the ability to get a collection of file ids from the system",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "description": "The zero based page number of the collection of orders in your request. If a page goes beyond the collection size, No records will be returned.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "per_page",
            "description": "The number of files to view in the response with a maximum of 200. If a number above 200 is used only 200 will be used in the response",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "filter",
            "description": "a customizable filter that can be applied to your collection",
            "example": "filter={'id':'ABC123'}",
            "schema": {
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Collection of Files",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileGetAggregationResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid."
          }
        }
      },
      "post": {
        "tags": [
          "Files"
        ],
        "summary": "Uploads a new file in the file-management-api system",
        "description": "This provides the ability to upload a new file",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/FilePostRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This response includes the referenceId whis is the consumers unique identifier, the order id which is can be used in instance requests and the creation date time",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilePostResponse"
                }
              }
            }
          },
          "400": {
            "description": "This is identified as a request that is malformed. This is typically a malformed payload.",
            "content": {
              "application/json": {}
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid."
          },
          "409": {
            "description": "This is identified as a request already received by the system",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/v1/files/{file_id}": {
      "parameters": [
        {
          "name": "file_id",
          "in": "path",
          "required": true,
          "description": "ID of file that we want to query",
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "tags": [
          "Files"
        ],
        "summary": "Gets file metadata based on a given file id",
        "responses": {
          "200": {
            "description": "The File Metadata",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileGetInstanceResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid."
          }
        }
      },
      "post": {
        "tags": [
          "Files"
        ],
        "summary": "Gets file binary data based on a given file id",
        "responses": {
          "200": {
            "description": "The File Binary Data",
            "content": {
              "formData": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid."
          }
        }
      },
      "delete": {
        "tags": [
          "Files"
        ],
        "summary": "Deletes a file based on a given file id. Returns the modified metadata with a deleted timestamp",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "nonce": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The File Metadata Data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileGetInstanceResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "FilePostRequest": {
        "type": "object",
        "properties": {
          "file": {
            "type": "string",
            "description": "This is file path of the local file system to upload"
          }
        }
      },
      "FilePostResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "a unique identifier associated to the file"
          },
          "name": {
            "type": "string",
            "description": "This is file metadata and will serve as the new file name stored in the system"
          },
          "description": {
            "type": "string",
            "description": "this is file metadata and will describe when the file was uploaded."
          },
          "size": {
            "type": "number",
            "description": "this is file metadata and will provide the fiile size in bytes"
          },
          "file_id": {
            "type": "string",
            "description": "this is the file id generated by the underlying file system (GridFS, Cloud Bucket, Local File path)"
          },
          "file_name": {
            "type": "string",
            "description": "the original filename when the file was uploaded"
          },
          "context_id": {
            "type": "string",
            "description": "the external identifier used for segregating/organizing the files."
          },
          "path": {
            "type": "string",
            "description": "this is file metadat and serves as a virtual file folder and can be used for organization."
          },
          "nonce": {
            "type": "string",
            "description": "used for client side concurrency"
          },
          "timestamps": {
            "$ref": "#/components/schemas/Timestamps"
          }
        }
      },
      "FileGetInstanceResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "a unique identifier associated to the file"
          },
          "name": {
            "type": "string",
            "description": "This is file metadata and will serve as the new file name stored in the system"
          },
          "description": {
            "type": "string",
            "description": "this is file metadata and will describe when the file was uploaded."
          },
          "size": {
            "type": "number",
            "description": "this is file metadata and will provide the fiile size in bytes"
          },
          "file_id": {
            "type": "string",
            "description": "this is the file id generated by the underlying file system (GridFS, Cloud Bucket, Local File path)"
          },
          "file_name": {
            "type": "string",
            "description": "the original filename when the file was uploaded"
          },
          "context_id": {
            "type": "string",
            "description": "the external identifier used for segregating/organizing the files."
          },
          "path": {
            "type": "string",
            "description": "this is file metadat and serves as a virtual file folder and can be used for organization."
          },
          "nonce": {
            "type": "string",
            "description": "used for client side concurrency"
          },
          "timestamps": {
            "$ref": "#/components/schemas/Timestamps"
          }
        }
      },
      "FileGetAggregationResponse": {
        "type": "array",
        "items": {
          "properties": {
            "id": {
              "type": "string",
              "description": "a unique identifier associated to the file"
            },
            "name": {
              "type": "string",
              "description": "This is file metadata and will serve as the new file name stored in the system"
            }
          }
        }
      },
      "Timestamps": {
        "type": "object",
        "items": {
          "properties": {
            "deleted": {
              "type": "string"
            },
            "created": {
              "type": "string"
            },
            "updated": {
              "type": "string"
            }
          }
        }
      }
    }
  }
}